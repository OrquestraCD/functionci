AWSTemplateFormatVersion: '2010-09-09'

Description: 'FunctionCI is an open source CI/CD Slack Bot for AWS Lambdas.'

Parameters:
  KMSStack:
    Type: String
    Description: KMS Stack Name
    Default: 'functionci-kms'
  TLD:
    Type: String
    Description: TLD name needed by Route53 to perform DNS (example.com)
    Default: ''
  Domain:
    Type: String
    Description: Domain name for your api (api.example.com)
    Default: ''
  Path:
    Type: String
    Description: The path part of your api (api.example.com/path)
    Default: 'api'
  Stage:
    Type: String
    Description: The deployment stage used by API Gateway
    Default: 'prod'
  SlackClientId:
    Type: String
    Description: Slack client id
    NoEcho: true
  SlackVerificationToken:
    Type: String
    Description: Slack verification token
    NoEcho: true
  SlackWebhookUrl:
    Type: String
    Description: Slack Webhook url where we post build notifications.
    NoEcho: true

Conditions:
  UseCustomDomain: !And
    - !Not [!Equals [!Ref TLD, '']]
    - !Not [!Equals [!Ref Domain, '']]

Resources:

  #
  # Role for CloudFormation
  #
  IamRoleCloudFormationExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

  #
  # Create a Policy and attach it to our CloudFormation Role.
  #
  IamPolicyCloudFormationExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IamPolicyCloudFormationExecution
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: '*'
          Resource: '*'
      Roles:
      - Ref: IamRoleCloudFormationExecution

  #
  # DynamoDB Tables
  #
  FunctionCITable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'FunctionCI'
      AttributeDefinitions:
        -
          AttributeName: 'hash_key'
          AttributeType: 'S'
        -
          AttributeName: 'sort_key'
          AttributeType: 'S'
      KeySchema:
        -
          AttributeName: 'hash_key'
          KeyType: 'HASH'
        -
          AttributeName: 'sort_key'
          KeyType: 'RANGE'
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

  #
  # Role that our Lambda will assume to provide access to other AWS resources
  #
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

  #
  # Create a Policy and attach it to our Lambda Role.
  #
  IamPolicyLambdaExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IamPolicyLambdaExecution
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
          Resource: arn:aws:logs:us-east-1:*:*
        - Effect: Allow
          Action:
            - logs:PutLogEvents
          Resource: arn:aws:logs:us-east-1:*:*
          Resource: '*'
      Roles:
      - Ref: IamRoleLambdaExecution

  #
  # Our Lambda function.  Basic code has been added.  You will replace the code later via your Github repo.
  #
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - IamRoleCloudFormationExecution
      - IamPolicyCloudFormationExecution
      - FunctionCITable
    Properties:
      Handler: index.handler
      Timeout: 5
      Role:
        Fn::GetAtt:
          - IamRoleLambdaExecution
          - Arn
      Code:
        ZipFile: !Sub |
          'use strict';

          exports.handler = function(event, context, callback) {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify({
                      message: `Hello CIM`,
                      event: event
                  })
              };

              callback(null, response);
          };
      Runtime: nodejs6.10
      KmsKeyArn:
        Fn::ImportValue:
          !Sub "${KMSStack}-FunctionCiKmsKeyArn"
      Environment:
        Variables:
          IamRoleCloudFormationExecution: !GetAtt IamRoleCloudFormationExecution.Arn
          FunctionCITable: !GetAtt FunctionCITable.Arn
          SlackClientId: !Ref SlackClientId
          SlackVerificationToken: !Ref SlackVerificationToken
          SlackWebhookUrl: !Ref SlackWebhookUrl

  #
  # Create the API Gateway
  #
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ApiGatewayRestApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: !Ref Path #ex. example.com/api.
      RestApiId: !Ref RestApi

  ApiGatewayResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResource
      PathPart: '{proxy+}'
      RestApiId: !Ref RestApi

  ApiGatewayMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref ApiGatewayResourceProxy
      RestApiId: !Ref RestApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Credentials: "'false'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: true

  ApiGatewayMethodAny:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt LambdaFunction.Arn
              - '/invocations'
      MethodResponses: []

  ApiGatewayMethodProxyAny:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceProxy
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt LambdaFunction.Arn
              - '/invocations'
      MethodResponses: []

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Stage # Maps to the custom domain name.  BasePathMapping.Stage
    DependsOn:
      - ApiGatewayMethodOptions
      - ApiGatewayMethodAny
      - ApiGatewayMethodProxyAny

  #
  # We need to give API Gateway permission to invoke our Lambda function.
  #
  PermissionForAPIGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':'
            - Ref: RestApi
            - '/*/*'

  #
  # SSL Certificate needed by CloudFront.
  #
  SSL:
    Type: AWS::CertificateManager::Certificate
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      DomainValidationOptions:
        - DomainName: !Ref Domain
          ValidationDomain: !Ref TLD

  #
  # Custom Domain Name
  #
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      CertificateArn: !Ref SSL

  #
  # Wire custom domain to Api Gateway
  #
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref RestApi
      Stage: !Ref Stage

  #
  # Route53 DNS record set to map our domain to API Gateway
  #
  DomainDNS:
    Type: AWS::Route53::RecordSetGroup
    Condition: UseCustomDomain
    Properties:
      HostedZoneName:
        Fn::Join:
          - ''
          - - !Ref TLD
            - '.'
      RecordSets:
        -
          Name: !Ref Domain
          Type: 'A'
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2' # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
            DNSName: !GetAtt ApiDomainName.DistributionDomainName

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'functionci-artifacts'

Outputs:
  LambdaFunction:
    Description: Lambda Function
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'
  LambdaFunctionArn:
    Description: Lambda Function Arn
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'
  ArtifactsBucket:
    Description: Artifacts Bucket
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucket'
  ApiGatewayUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - 'https://'
        - !Ref RestApi
        - '.execute-api.'
        - !Ref AWS::Region
        - '.amazonaws.com/'
        - !Ref Stage
        - '/'
        - !Ref Path
  SlackSlashCommandsUrl:
    Description: Slack slash commands url
    Value: !Join
      - ''
      - - 'https://'
        - !Ref RestApi
        - '.execute-api.'
        - !Ref AWS::Region
        - '.amazonaws.com/'
        - !Ref Stage
        - '/'
        - !Ref Path
        - '/commands'
  SlackInteractiveComponentsUrl:
    Description: Slack interactive components url
    Value: !Join
      - ''
      - - 'https://'
        - !Ref RestApi
        - '.execute-api.'
        - !Ref AWS::Region
        - '.amazonaws.com/'
        - !Ref Stage
        - '/'
        - !Ref Path
        - '/interactive-components'
  CustomDomainUrl:
    Description: URL of your API endpoint
    Condition: UseCustomDomain
    Value: !Join
      - ''
      - - 'https://'
        - !Ref Domain
        - '/'
        - !Ref Path
  CustomSlackSlashCommandsUrl:
    Description: Slack slack commands url
    Condition: UseCustomDomain
    Value: !Join
      - ''
      - - 'https://'
        - !Ref Domain
        - '/'
        - !Ref Path
        - '/commands'
  CustomSlackInteractiveComponentsUrl:
    Description: Slack interactive components url
    Condition: UseCustomDomain
    Value: !Join
      - ''
      - - 'https://'
        - !Ref Domain
        - '/'
        - !Ref Path
        - '/interactive-components'