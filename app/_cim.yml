version: 0.1
stack:
  name: functionci-app
  template:
    file: cloudformation.yml
    bucket: functionci-cf-artifacts # Note: Update this with your bucket name.  Stacks are uploaded here prior to deployment.'
  #
  # Reference parent stacks fo included shared information like stack name.
  #
  #parents:
  #  vpc: '../vpc'

  #
  # Define stack input parameters.
  #
  # Optional - Custom domain name settings.  If you specify 'TLD' you must also specify a 'Domain'.
  #            After you 'stack-up' you will need to verify your email address so that AWS can issue the SSL certificate for you domain.
  #            More info here:  http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate.html
  parameters:
    # # The top level domain that you created in Route53.
    # TLD: 'fnci.io'
    # # The domain you wish to use for this api.
    # Domain: 'api.fnci.io'
    # URI path
    Path: 'slack'

    # Slack params (encrypt)
    SlackClientId: '${kms.decrypt(AQICAHhjNpxGxc7AX6NhOIEjyoXA3KHc2qhbn8lphYP7XmgoZAHOi1KCRYmIYxNmRxuTt3cDAAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMbfSXER70j/I6oTGoAgEQgDObZ+HsB7KwiyXmD8VjzS4Z2Uq9LWeomjxoE8wLPqLYqH4D2gPT4SYRfwe0nJPPG+X9teU=)}'
    SlackVerificationToken: '${kms.decrypt(AQICAHhjNpxGxc7AX6NhOIEjyoXA3KHc2qhbn8lphYP7XmgoZAEi4XCUpuVY7qoTXVCvHprgAAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMdHQkTfSpDuEbSropAgEQgDNsNl5GUltJYMkw1cCbISrk/yPC+XJarBXxBUQoOXcPgX1wY/DAuJ91nh2CqMqXoNgg8fE=)}'
    SlackWebhookUrl: '${kms.decrypt(AQICAHhjNpxGxc7AX6NhOIEjyoXA3KHc2qhbn8lphYP7XmgoZAFA7KNwJqEqxAc/zOBIrdLBAAAArzCBrAYJKoZIhvcNAQcGoIGeMIGbAgEAMIGVBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDO1sQ35V7fzLh7P/ZwIBEIBo8M5HCCsV69kDgOdk0+oNmXVFX/pIFeLFbJT67Fuc96O3N8vllzsFoVHKUrJbf6zTIUXTuYGdU4PTXrEgjvQ/We4hZNIWDf1vGx/ItERnw+Go7CPS/R52M8DnV5CELfKElgGBm8S1feg=)}'

#
# Define stack capabilities required.
#
  capabilities:
    - 'CAPABILITY_IAM'

  #
  # Define global tags.
  #
  tags:
   app: 'functionci'

lambda:
  functions:
    -
      function: ${stack.outputs.LambdaFunction}
      zip_file: index.zip
  deploy:
    phases:
      pre_deploy:
        commands:
          # Install all npm packages including dev packages.
          - npm install

          # Run the tests
          # - npm test

          # Remove all the npm packages.
          - rm -Rf node_modules

          # Only install the non-dev npm packages.  We don't want to bloat our Lambda with dev packages.
          - npm install --production

          # Zip the Lambda for upload to S3.
          - zip -r index.zip .
      post_deploy:
        commands:
          # Remove the zip file.
          - rm -Rf index.zip

          # Reinstall the dev npm packages.
          - npm install
